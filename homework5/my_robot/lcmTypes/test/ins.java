/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package exlcm;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class ins implements lcm.lcm.LCMEncodable
{
    public float Yaw;
    public float Pitch;
    public float Roll;
    public float MagX;
    public float MagY;
    public float MagZ;
    public float AccelX;
    public float AccelY;
    public float AccelZ;
    public float GyroX;
    public float GyroY;
    public float GyroZ;
 
    public ins()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xded056298e22c63fL;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(exlcm.ins.class))
            return 0L;
 
        classes.add(exlcm.ins.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeFloat(this.Yaw); 
 
        outs.writeFloat(this.Pitch); 
 
        outs.writeFloat(this.Roll); 
 
        outs.writeFloat(this.MagX); 
 
        outs.writeFloat(this.MagY); 
 
        outs.writeFloat(this.MagZ); 
 
        outs.writeFloat(this.AccelX); 
 
        outs.writeFloat(this.AccelY); 
 
        outs.writeFloat(this.AccelZ); 
 
        outs.writeFloat(this.GyroX); 
 
        outs.writeFloat(this.GyroY); 
 
        outs.writeFloat(this.GyroZ); 
 
    }
 
    public ins(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public ins(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static exlcm.ins _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        exlcm.ins o = new exlcm.ins();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.Yaw = ins.readFloat();
 
        this.Pitch = ins.readFloat();
 
        this.Roll = ins.readFloat();
 
        this.MagX = ins.readFloat();
 
        this.MagY = ins.readFloat();
 
        this.MagZ = ins.readFloat();
 
        this.AccelX = ins.readFloat();
 
        this.AccelY = ins.readFloat();
 
        this.AccelZ = ins.readFloat();
 
        this.GyroX = ins.readFloat();
 
        this.GyroY = ins.readFloat();
 
        this.GyroZ = ins.readFloat();
 
    }
 
    public exlcm.ins copy()
    {
        exlcm.ins outobj = new exlcm.ins();
        outobj.Yaw = this.Yaw;
 
        outobj.Pitch = this.Pitch;
 
        outobj.Roll = this.Roll;
 
        outobj.MagX = this.MagX;
 
        outobj.MagY = this.MagY;
 
        outobj.MagZ = this.MagZ;
 
        outobj.AccelX = this.AccelX;
 
        outobj.AccelY = this.AccelY;
 
        outobj.AccelZ = this.AccelZ;
 
        outobj.GyroX = this.GyroX;
 
        outobj.GyroY = this.GyroY;
 
        outobj.GyroZ = this.GyroZ;
 
        return outobj;
    }
 
}

